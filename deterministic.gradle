/*
 * Gradle script plugin: Configure a module such that the Java and Kotlin
 * compilers use the deterministic rt.jar instead of the full JDK rt.jar.
 */
buildscript {
    ext {
        deterministic = true
        jdk_home = "$rootDir/jdk".toString()
        rt_jar = "$jdk_home/jre/lib/rt.jar".toString()

        //the name given to the SDK for intellij, can be changed but should match the one given inside intellij
        deterministic_idea_sdk = '1.8 (Deterministic tutorial)'

        //for the deterministic sdk, the place to dowload the atifactory
        artifactory_contextUrl = 'https://ci-artifactory.corda.r3cev.com/artifactory'
    }

}

apply plugin: 'idea'

repositories {
    maven { url "$artifactory_contextUrl/corda-dev" } // deterministic-rt SNAPSHOT
    maven { url "$artifactory_contextUrl/corda-releases" }
}

configurations {
    jdk.resolutionStrategy {
        cacheChangingModulesFor 0, 'seconds'
    }

    all {
        if (it.state == Configuration.State.UNRESOLVED) {
            // Ensure that this module uses the deterministic Corda artifacts.
            resolutionStrategy.dependencySubstitution {
                substitute module("$corda_release_group:corda-serialization:$corda_release_version") with module("$corda_release_group:corda-serialization-deterministic:$corda_release_version")
                substitute module("$corda_release_group:corda-core:$corda_release_version") with module("$corda_release_group:corda-core-deterministic:$corda_release_version")
            }
        }
    }
}

idea {
    module {
        jdkName project.property("deterministic_idea_sdk") as String
    }
}

tasks.getByName("compileJava") {
    options.compilerArgs << '-bootclasspath' << rt_jar
}

dependencies {
    jdk "net.corda:deterministic-rt:latest.integration:api"
}

//TODO: modify to insert package that accepts Lambda, after downloading the file unpack, copy from normal jdk, pack again
task installJdk(type: Copy) {
    outputs.dir jdk_home

    from(configurations.jdk) {
        rename 'deterministic-rt-(.*).jar', 'rt.jar'
    }
    into "$jdk_home/jre/lib"

    doLast {
        def eol = System.getProperty('line.separator')
        file("$jdk_home/release").write "JAVA_VERSION=\"1.8.0_172\"$eol"
        mkdir "$jdk_home/bin"
        file("$jdk_home/bin/javac").with {
            write "#!/bin/sh\necho \"javac 1.8.0_172\"\n"
            setExecutable true, false
            return
        }
    }
}

tasks.withType(AbstractCompile).all {
    dependsOn installJdk

    // This is a bit ugly, but Gradle isn't recognising the KotlinCompile task
    // as it does the built-in JavaCompile task.
    //uncomment if you need to compile Kotlin
    /* if (it.class.name.startsWith("org.jetbrains.kotlin.gradle.tasks.KotlinCompile")) {
         kotlinOptions.jdkHome = jdk_home
     }*/
}
